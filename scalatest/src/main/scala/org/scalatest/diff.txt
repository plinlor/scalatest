30d29
<  * <p>
32,33c31,32
<  * futures: <code>recoverToSucceededIf</code> and <code>recoverToExceptionIf</code>.
<  * Because this trait is mixed into trait <code>AsyncTestSuite</code>, both of its methods are
---
>  * futures: `recoverToSucceededIf` and `recoverToExceptionIf`.
>  * Because this trait is mixed into trait `AsyncTestSuite`, both of its methods are
35c34
<  * </p>
---
>  * 
37d35
<  * <p>
39,40c37,38
<  * not need to inspect the exception further, use <code>recoverToSucceededIf</code>:
<  * </p>
---
>  * not need to inspect the exception further, use `recoverToSucceededIf`:
>  * 
42c40
<  * <pre class="stHighlight">
---
>  * {{{  <!-- class="stHighlight" -->
46c44
<  * </pre>
---
>  * }}}
48,52c46,49
<  * <p>
<  * The <code>recoverToSucceededIf</code> method performs a job similar to
<  * <a href="Assertions.html#expectedExceptions"><code>assertThrows</code></a>, except
<  * in the context of a future. It transforms a <code>Future</code> of any type into a
<  * <code>Future[Assertion]</code> that succeeds only if the original future fails with the specified
---
>  * The `recoverToSucceededIf` method performs a job similar to
>  * <a href="Assertions.html#expectedExceptions">`assertThrows`</a>, except
>  * in the context of a future. It transforms a `Future` of any type into a
>  * `Future[Assertion]` that succeeds only if the original future fails with the specified
54c51
<  * </p>
---
>  * 
56c53
<  * <pre class="stREPL">
---
>  * {{{  <!-- class="stREPL" -->
73c70,72
<  * </pre>
---
>  * }}}
>  * 
>  * Otherwise it fails with an error message similar to those given by `assertThrows`:
75,77d73
<  * <p>
<  * Otherwise it fails with an error message similar to those given by <code>assertThrows</code>:
<  * </p>
79c75
<  * <pre class="stREPL">
---
>  * {{{  <!-- class="stREPL" -->
100c96
<  * </pre>
---
>  * }}}
102,105c98,100
<  * <p>
<  * The <code>recoverToExceptionIf</code> method differs from the <code>recoverToSucceededIf</code> in
<  * its behavior when the assertion succeeds: <code>recoverToSucceededIf</code> yields a <code>Future[Assertion]</code>,
<  * whereas <code>recoverToExceptionIf</code> yields a <code>Future[T]</code>, where <code>T</code> is the
---
>  * The `recoverToExceptionIf` method differs from the `recoverToSucceededIf` in
>  * its behavior when the assertion succeeds: `recoverToSucceededIf` yields a `Future[Assertion]`,
>  * whereas `recoverToExceptionIf` yields a `Future[T]`, where `T` is the
107c102
<  * </p>
---
>  * 
109c104
<  * <pre class="stHighlight">
---
>  * {{{  <!-- class="stHighlight" -->
113c108
<  * </pre>
---
>  * }}}
115,118c110,112
<  * <p>
<  * In other words, <code>recoverToExpectionIf</code> is to
<  * <a href="Assertions.html#expectedExceptions"><code>intercept</code></a> as
<  * <code>recovertToSucceededIf</code> is to <code>assertThrows</code>. The first one allows you to perform further
---
>  * In other words, `recoverToExpectionIf` is to
>  * <a href="Assertions.html#expectedExceptions">`intercept`</a> as
>  * `recovertToSucceededIf` is to `assertThrows`. The first one allows you to perform further
120,121c114,115
<  * at the end of the test body. Here's an example showing <code>recoverToExceptionIf</code> in the REPL:
<  * </p>
---
>  * at the end of the test body. Here's an example showing `recoverToExceptionIf` in the REPL:
>  * 
123c117
<  * <pre class="stREPL">
---
>  * {{{  <!-- class="stREPL" -->
140c134
<  * </pre>
---
>  * }}}
147c141
<    * Transforms a future of any type into a <code>Future[T]</code>, where <code>T</code> is a given
---
>    * Transforms a future of any type into a `Future[T]`, where `T` is a given
149c143
<    * completes with a <code>Failure</code> containing the specified exception type.
---
>    * completes with a `Failure` containing the specified exception type.
151d144
<    * <p>
153c146
<    * </p>
---
>    * 
157c150
<    *   a <code>TestFailedException</code>
---
>    *   a `TestFailedException`
177,178c170,171
<    * Transforms a future of any type into a <code>Future[Assertion]</code> that succeeds if the future
<    * completes with a <code>Failure</code> containing the specified exception type.
---
>    * Transforms a future of any type into a `Future[Assertion]` that succeeds if the future
>    * completes with a `Failure` containing the specified exception type.
180d172
<    * <p>
182c174
<    * </p>
---
>    * 
185,186c177,178
<    * @return a Future[Assertion] containing on success the <code>Succeeded</code> singleton, or containing on failure
<    *   a <code>TestFailedException</code>
---
>    * @return a Future[Assertion] containing on success the `Succeeded` singleton, or containing on failure
>    *   a `TestFailedException`
215,216c207,208
<  * Companion object that facilitates the importing of <code>RecoverMethods</code>'s method as 
<  * an alternative to mixing it in. One use case is to import <code>RecoverMethods</code>'s method so you can use
---
>  * Companion object that facilitates the importing of `RecoverMethods`'s method as 
>  * an alternative to mixing it in. One use case is to import `RecoverMethods`'s method so you can use
